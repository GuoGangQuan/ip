package gloqi.ui;

import gloqi.command.Command;
import gloqi.command.CommandParser;
import gloqi.task.Deadline;
import gloqi.task.Event;
import gloqi.task.Task;
import gloqi.task.Todo;

// this Javadoc is generated by chatgpt

/**
 * Represents a chatbot that manages tasks.
 * The chatbot reads user commands, executes them, and stores tasks.
 */
public class Gloqi {

    private static final String CHATBOT_NAME = "Gloqi";
    private final Ui ui;
    private BankList bankList;

    /**
     * Creates a new Gloqi chatbot with default data file path:data/data.txt for storing tasks.
     */
    public Gloqi() {
        this.bankList = new BankList(new DataManager("data/data.txt"));
        this.ui = new Ui(CHATBOT_NAME);
    }

    /**
     * Initializes the task bank by loading tasks from persistent storage.
     * <p>
     * If the data file is corrupted or cannot be read, an error message is returned
     * from the thrown {@link GloqiException}. Otherwise, confirms that tasks were
     * loaded successfully.
     *
     * @return a success message if tasks are loaded, or an error message if loading fails
     */
    public String initialize() {
        try {
            bankList = bankList.loadBankList();
        } catch (GloqiException e) {
            return e.getMessage();
        }
        return "Tasks are loaded successfully!";
    }


    /**
     * Runs the main logic of the chatbot.
     * Reads user input, parses commands, executes them, and continues
     * until the user issues the BYE command.
     *
     * @param userInput user input string
     * @return response String from the chatbot
     */
    public String run(String userInput) {
        try {
            CommandParser commandParser = new CommandParser(userInput);
            Command cmd = commandParser.getCmd();
            String response = executeCommand(cmd, commandParser);
            assert response != null : "response should not be null";
            return response;
        } catch (GloqiException e) {
            return e.getMessage();
        }
    }

    public String getGreeting() {
        return ui.getGreetMessage();
    }

    /**
     * Executes the given command with its parsed arguments.
     *
     * @param cmd           the command to execute
     * @param commandParser the parser holding the command arguments
     * @return the response message after executing the command
     * @throws GloqiException if the command is invalid or arguments are incorrect
     */
    private String executeCommand(Command cmd, CommandParser commandParser) throws GloqiException {
        assert cmd != null : "cmd should not be null";
        return switch (cmd) {
        case LIST -> handleList();
        case MARK -> handleMark(commandParser);
        case UNMARK -> handleUnmark(commandParser);
        case TODO -> handleTodo(commandParser);
        case DEADLINE -> handleDeadline(commandParser);
        case EVENT -> handleEvent(commandParser);
        case DELETE -> handleDelete(commandParser);
        case SHOW -> handleShow(commandParser);
        case FIND -> handleFind(commandParser);
        case BYE -> ui.getEndMessage();
        default -> throw invalidCommand();
        };
    }

    private String handleList() {
        return bankList.printList();
    }

    private String handleMark(CommandParser parser) throws GloqiException {
        return bankList.markTask(parser.getIntArg());
    }

    private String handleUnmark(CommandParser parser) throws GloqiException {
        return bankList.unmarkTask(parser.getIntArg());
    }

    private String handleTodo(CommandParser parser) {
        Task task = new Todo(parser.getStringArg()[0]);
        return bankList.addTask(task);
    }

    private String handleDeadline(CommandParser parser) throws GloqiException {
        Task task = new Deadline(parser.getStringArg());
        return bankList.addTask(task);
    }

    private String handleEvent(CommandParser parser) throws GloqiException {
        Task task = new Event(parser.getStringArg());
        return bankList.addTask(task);
    }

    private String handleDelete(CommandParser parser) throws GloqiException {
        return bankList.deleteTask(parser.getIntArg());
    }

    private String handleShow(CommandParser parser) {
        return bankList.printList(parser.getDateArg());
    }

    private String handleFind(CommandParser parser) throws GloqiException {
        return bankList.findTask(parser.getStringArg()[0]);
    }

    private GloqiException invalidCommand() {
        return new GloqiException("""
                Invalid command, only following commands are supported:
                list, mark, unmark, bye, deadline, event, todo, show, delete, find""");
    }
}
